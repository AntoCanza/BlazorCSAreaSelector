@inject IJSRuntime jsRuntime
@inject HttpClient Http


<p>currX: @_currentMouseX  currY: @_currentMouseY offsetX: @_offsetX offsetY: @_offsetY lastX: @areaInfo.StartMouseX lastY: @areaInfo.StartMouseY isMouseDown: @_mousedown</p>

@if(isLoading)
{
    <p><h4>WAIT...</h4></p>
}
<div id="@preciImageContainerId" class="@preciImageContainerId" @onmousedown="Mousedown" @onmouseup="MouseUp" @onmousemove="MouseMove"
     style="background: url('@myImage') no-repeat;">
    <BECanvas Width="960" Height="960" @ref="_canvasReference"></BECanvas>
</div>

@code {
    [Parameter]
    public string FileName { get; set; }
    private string myImage { get; set; }
    private PreciAreaSelection areaInfo;
    private Canvas2DContext _context;
    protected BECanvasComponent _canvasReference;
    private float _offsetX, _offsetY = 0;
    private float _currentMouseX, _currentMouseY = 0;
    private bool _mousedown = false;
    private bool isLoading = false;
    private const string preciImageContainerId = "preciImageContainer";
    private const string apiEndPoint = @"/PreciImage/";

    protected override void OnInitialized()
    {
        areaInfo = new PreciAreaSelection();
        myImage = MakeEndPointUrl(FileName);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        this._context = await this._canvasReference.CreateCanvas2DAsync();
        //we need to calculate offset after canvas is rendered.
        _offsetX = await jsRuntime.InvokeAsync<float>("getOffsetLeft", preciImageContainerId);
        _offsetY = await jsRuntime.InvokeAsync<float>("getOffsetTop", preciImageContainerId);
    }

    private void Mousedown(MouseEventArgs e)
    {
        areaInfo.StartMouseX = (float)e.ClientX - _offsetX;
        areaInfo.StartMouseY = (float)e.ClientY - _offsetY;
        _mousedown = true;
    }

    private async Task MouseUp(MouseEventArgs e)
    {
        _mousedown = false;
        isLoading = true;
        areaInfo = await Http.PostJsonAsync<PreciAreaSelection>(MakeEndPointUrl(FileName), areaInfo);
        myImage = MakeEndPointUrl(areaInfo.RenderedImage);
        isLoading = false;
    }

    private async Task MouseMove(MouseEventArgs e)
    {
        _currentMouseX = (float)e.ClientX - _offsetX;
        _currentMouseY = (float)e.ClientY - _offsetY;

        if (_mousedown)
        {
            areaInfo.LastMouseX = _currentMouseX;
            areaInfo.LastMouseY = _currentMouseY;
            await this._context.ClearRectAsync(0, 0, this._canvasReference.Height, this._canvasReference.Width);
            await this._context.BeginPathAsync();
            areaInfo.Width = _currentMouseX - areaInfo.StartMouseX;
            areaInfo.Height = _currentMouseY - areaInfo.StartMouseY;
            await this._context.RectAsync(areaInfo.StartMouseX, areaInfo.StartMouseY, areaInfo.Width, areaInfo.Height);
            await this._context.SetStrokeStyleAsync("red");
            await this._context.SetLineWidthAsync(1);
            await this._context.StrokeAsync();
        }
    }

    private string MakeEndPointUrl(string param)
    {
        return apiEndPoint + param;
    }
}
